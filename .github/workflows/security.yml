name: security_scan
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # ───────────────────────── 1) ZAP ─────────────────────────
  zap-baseline:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: "https://fitnessapi.onrender.com"   # ajusta si usas localhost
          rules_file_name: ".zap/rules.tsv"
          cmd_options: "-a -T 180"

  # ───────────────────────── 2) Snyk (NO bloquea) ─────────────────────────
  snyk-scan:
    runs-on: ubuntu-latest
    needs: zap-baseline                # corre después de ZAP
    continue-on-error: true            # ✔️  pase lo que pase NO rompe el workflow

    permissions:
      contents: read
      security-events: write           # para subir SARIF

    steps:
      - uses: actions/checkout@v4

      # instala la CLI
      - uses: snyk/actions/setup@master

      # ejecuta análisis; si Snyk no reconoce nada simplemente avisa
      - name: Snyk OSS scan (soft-gate)
        uses: snyk/actions@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --all-projects --sarif-file-output=snyk.sarif

      # subimos el SARIF (aunque esté vacío) para que quede evidencia
      - name: Upload Snyk SARIF
        if: always()                   # se ejecute cambie o no cambie el exit code
        uses: actions/upload-artifact@v4
        with:
          name: snyk.sarif
          path: snyk.sarif
